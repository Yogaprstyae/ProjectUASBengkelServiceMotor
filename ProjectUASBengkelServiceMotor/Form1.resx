<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /4Pg//8H4D/8B/Af8A/8AAA//iAA///AAf8=
</value>
  </data>
</root>